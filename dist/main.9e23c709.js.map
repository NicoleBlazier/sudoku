{"version":3,"sources":["main.js"],"names":["CONSTANT","UNASSIGNED","GRID_SIZE","BOX_SIZE","NUMBERS","LEVEL_NAME","LEVEL","document","querySelector","addEventListener","body","classList","toggle","isDarkMode","contains","localStorage","setItem","setAttribute","start_screen","game_screen","pause_screen","result_screen","cells","querySelectorAll","name_input","number_inputs","player_name","game_level","game_time","result_time","level_index","level","timer","pause","seconds","su","undefined","su_answer","selected_cell","getGameInfo","JSON","parse","getItem","initGameGrid","index","i","Math","pow","row","floor","col","style","marginBottom","marginRight","setPlayerName","name","getPlayerName","showTime","Date","toISOString","substr","clearSudoku","innerHTML","remove","initSudoku","resetBg","sudokuGen","question","saveGameInfo","add","loadSudoku","game","answer","hoverBg","box_start_row","box_start_col","j","step","forEach","e","checkErr","value","addErr","cell","parseInt","getAttribute","setTimeout","removeErr","original","stringify","removeGameInfo","removeItem","display","isGameWin","sudokuCheck","showResult","clearInterval","start","stop","initNumberInputEvent","initCellsEvent","startGame","trim","setInterval","returnStartScreen","length","target","focus","console","log","init","darkmode","confetti","newGrid","size","arr","Array","isColSafe","grid","isRowSafe","isBoxSafe","box_row","box_col","isSafe","findUnassignedPos","pos","shuffleArray","curr_index","rand_index","random","temp","isFullGrid","every","sudokuCreate","unassigned_pos","number_list","num","rand","removeCells","res","attemps","sudoku","check","maxCount","speed","frameInterval","alpha","gradient","resume","togglePause","isPaused","isRunning","startConfetti","stopConfetti","streamingConfetti","pauseConfetti","resumeConfetti","particles","supportsAnimationFrame","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","colors","lastFrameTime","now","waveAngle","context","resetParticle","particle","width","height","color","color2","x","y","diameter","tilt","tiltAngleIncrement","tiltAngle","PI","runAnimation","clearRect","innerWidth","innerHeight","delta","sin","cos","splice","updateParticles","x2","y2","beginPath","lineWidth","createLinearGradient","addColorStop","strokeStyle","moveTo","lineTo","stroke","drawParticles","timeout","min","max","callback","canvas","getElementById","createElement","prepend","getContext","count","push"],"mappings":"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","file":"main.9e23c709.js","sourceRoot":"../src/public","sourcesContent":["const CONSTANT = {\n    UNASSIGNED: 0,\n    GRID_SIZE: 9,\n    BOX_SIZE: 3,\n    NUMBERS: [1,2,3,4,5,6,7,8,9],\n    LEVEL_NAME: [\n        'Easy',\n        'Medium',\n        'Hard',\n        'Very hard',\n        'Insane',\n        'Inhuman'\n    ],\n    LEVEL: [29, 38, 47, 56, 65, 74]\n}\n\ndocument.querySelector('#toggle-dark').addEventListener('click', () => {\n    document.body.classList.toggle('dark');\n    const isDarkMode = document.body.classList.contains('dark');\n    localStorage.setItem('darkmode', isDarkMode);\n    // chang mobile status bar color\n    document.querySelector('meta[name=\"theme-color\"').setAttribute('content', isDarkMode ? '#1a1a2e' : '#fff');\n});\n\n// initial value\n\n// screens\nconst start_screen = document.querySelector('#start-screen');\nconst game_screen = document.querySelector('#game-screen');\nconst pause_screen = document.querySelector('#pause-screen');\nconst result_screen = document.querySelector('#result-screen');\n// ----------\nconst cells = document.querySelectorAll('.main-grid-cell');\n\nconst name_input = document.querySelector('#input-name');\n\nconst number_inputs = document.querySelectorAll('.number');\n\nconst player_name = document.querySelector('#player-name');\nconst game_level = document.querySelector('#game-level');\nconst game_time = document.querySelector('#game-time');\n\nconst result_time = document.querySelector('#result-time');\n\nlet level_index = 0;\nlet level = CONSTANT.LEVEL[level_index];\n\nlet timer = null;\nlet pause = false;\nlet seconds = 0;\n\nlet su = undefined;\nlet su_answer = undefined;\n\nlet selected_cell = -1;\n\n// --------\n\nconst getGameInfo = () => JSON.parse(localStorage.getItem('game'));\n\n// add space for each 9 cells\nconst initGameGrid = () => {\n    let index = 0;\n\n    for (let i = 0; i < Math.pow(CONSTANT.GRID_SIZE,2); i++) {\n        let row = Math.floor(i/CONSTANT.GRID_SIZE);\n        let col = i % CONSTANT.GRID_SIZE;\n        if (row === 2 || row === 5) cells[index].style.marginBottom = '10px';\n        if (col === 2 || col === 5) cells[index].style.marginRight = '10px';\n\n        index++;\n    }\n}\n// ----------------\n\nconst setPlayerName = (name) => localStorage.setItem('player_name', name);\nconst getPlayerName = () => localStorage.getItem('player_name');\n\nconst showTime = (seconds) => new Date(seconds * 1000).toISOString().substr(11, 8);\n\nconst clearSudoku = () => {\n    for (let i = 0; i < Math.pow(CONSTANT.GRID_SIZE, 2); i++) {\n        cells[i].innerHTML = '';\n        cells[i].classList.remove('filled');\n        cells[i].classList.remove('selected');\n    }\n}\n\nconst initSudoku = () => {\n    // clear old sudoku\n    clearSudoku();\n    resetBg();\n    // generate sudoku puzzle here\n    su = sudokuGen(level);\n    su_answer = [...su.question];\n\n    seconds = 0;\n\n    saveGameInfo();\n\n    // show sudoku to div\n    for (let i = 0; i < Math.pow(CONSTANT.GRID_SIZE, 2); i++) {\n        let row = Math.floor(i / CONSTANT.GRID_SIZE);\n        let col = i % CONSTANT.GRID_SIZE;\n\n        cells[i].setAttribute('data-value', su.question[row][col]);\n\n        if (su.question[row][col] !== 0) {\n            cells[i].classList.add('filled');\n            cells[i].innerHTML = su.question[row][col];\n        }\n    }\n}\n\nconst loadSudoku = () => {\n    let game = getGameInfo();\n\n    game_level.innerHTML = CONSTANT.LEVEL_NAME[game.level];\n\n    su = game.su;\n\n    su_answer = su.answer;\n\n    seconds = game.seconds;\n    game_time.innerHTML = showTime(seconds);\n\n    level_index = game.level;\n\n    // show sudoku to div\n    for (let i = 0; i < Math.pow(CONSTANT.GRID_SIZE, 2); i++) {\n        let row = Math.floor(i / CONSTANT.GRID_SIZE);\n        let col = i % CONSTANT.GRID_SIZE;\n\n        cells[i].setAttribute('data-value', su_answer[row][col]);\n        cells[i].innerHTML = su_answer[row][col] !== 0 ? su_answer[row][col] : '';\n        if (su.question[row][col] !== 0) {\n            cells[i].classList.add('filled');\n        }\n    }\n}\n\nconst hoverBg = (index) => {\n    let row = Math.floor(index / CONSTANT.GRID_SIZE);\n    let col = index % CONSTANT.GRID_SIZE;\n\n    let box_start_row = row - row % 3;\n    let box_start_col = col - col % 3;\n\n    for (let i = 0; i < CONSTANT.BOX_SIZE; i++) {\n        for (let j = 0; j < CONSTANT.BOX_SIZE; j++) {\n            let cell = cells[9 * (box_start_row + i) + (box_start_col + j)];\n            cell.classList.add('hover');\n        }\n    }\n\n    let step = 9;\n    while (index - step >= 0) {\n        cells[index - step].classList.add('hover');\n        step += 9;\n    }\n\n    step = 9;\n    while (index + step < 81) {\n        cells[index + step].classList.add('hover');\n        step += 9;\n    }\n\n    step = 1;\n    while (index - step >= 9*row) {\n        cells[index - step].classList.add('hover');\n        step += 1;\n    }\n\n    step = 1;\n     while (index + step < 9*row + 9) {\n        cells[index + step].classList.add('hover');\n        step += 1;\n    }\n}\n\nconst resetBg = () => {\n    cells.forEach(e => e.classList.remove('hover'));\n}\n\nconst checkErr = (value) => {\n    const addErr = (cell) => {\n        if (parseInt(cell.getAttribute('data-value')) === value) {\n            cell.classList.add('err');\n            cell.classList.add('cell-err');\n            setTimeout(() => {\n                cell.classList.remove('cell-err');\n            }, 500);\n        }\n    }\n\n    let index = selected_cell;\n\n    let row = Math.floor(index / CONSTANT.GRID_SIZE);\n    let col = index % CONSTANT.GRID_SIZE;\n\n    let box_start_row = row - row % 3;\n    let box_start_col = col - col % 3;\n\n    for (let i = 0; i < CONSTANT.BOX_SIZE; i++) {\n        for (let j = 0; j < CONSTANT.BOX_SIZE; j++) {\n            let cell = cells[9 * (box_start_row + i) + (box_start_col + j)];\n            if (!cell.classList.contains('selected')) addErr(cell);\n        }\n    }\n\n    let step = 9;\n    while (index - step >= 0) {\n        addErr(cells[index - step]);\n        step += 9;\n    }\n\n    step = 9;\n    while (index + step < 81) {\n        addErr(cells[index + step]);\n        step += 9;\n    }\n\n    step = 1;\n    while (index - step >= 9*row) {\n        addErr(cells[index - step]);\n        step += 1;\n    }\n\n    step = 1;\n    while (index + step < 9*row + 9) {\n        addErr(cells[index + step]);\n        step += 1;\n    }\n}\n\nconst removeErr = () => cells.forEach(e => e.classList.remove('err'));\n\nconst saveGameInfo = () => {\n    let game = {\n        level: level_index,\n        seconds: seconds,\n        su: {\n            original: su.original,\n            question: su.question,\n            answer: su_answer\n        }\n    }\n    localStorage.setItem('game', JSON.stringify(game));\n}\n\nconst removeGameInfo = () => {\n    localStorage.removeItem('game');\n    document.querySelector('#btn-continue').style.display = 'none';\n}\n\nconst isGameWin = () => sudokuCheck(su_answer);\n\nconst showResult = () => {\n    clearInterval(timer);\n    result_screen.classList.add('active');\n    result_time.innerHTML = showTime(seconds);\n    start();\n    stop();\n}\n\nconst initNumberInputEvent = () => {\n    number_inputs.forEach((e, index) => {\n        e.addEventListener('click', () => {\n            if (!cells[selected_cell].classList.contains('filled')) {\n                cells[selected_cell].innerHTML = index + 1;\n                cells[selected_cell].setAttribute('data-value', index + 1);\n                // add to answer\n                let row = Math.floor(selected_cell / CONSTANT.GRID_SIZE);\n                let col = selected_cell % CONSTANT.GRID_SIZE;\n                su_answer[row][col] = index + 1;\n                // save game\n                saveGameInfo()\n                // -----\n                removeErr();\n                checkErr(index + 1);\n                cells[selected_cell].classList.add('zoom-in');\n                setTimeout(() => {\n                    cells[selected_cell].classList.remove('zoom-in');\n                }, 500);\n\n                // check game win\n                if (isGameWin()) {\n                    removeGameInfo();\n                    showResult();\n                }\n                // ----\n            }\n        })\n    })\n}\n\nconst initCellsEvent = () => {\n    cells.forEach((e, index) => {\n        e.addEventListener('click', () => {\n            if (!e.classList.contains('filled')) {\n                cells.forEach(e => e.classList.remove('selected'));\n\n                selected_cell = index;\n                e.classList.remove('err');\n                e.classList.add('selected');\n                resetBg();\n                hoverBg(index);\n            }\n        })\n    })\n}\n\nconst startGame = () => {\n    start_screen.classList.remove('active');\n    game_screen.classList.add('active');\n\n    player_name.innerHTML = name_input.value.trim();\n    setPlayerName(name_input.value.trim());\n\n    game_level.innerHTML = CONSTANT.LEVEL_NAME[level_index];\n\n    showTime(seconds);\n\n    timer = setInterval(() => {\n        if (!pause) {\n            seconds = seconds + 1;\n            game_time.innerHTML = showTime(seconds);\n        }\n    }, 1000);\n}\n\nconst returnStartScreen = () => {\n    clearInterval(timer);\n    pause = false;\n    seconds = 0;\n    start_screen.classList.add('active');\n    game_screen.classList.remove('active');\n    pause_screen.classList.remove('active');\n    result_screen.classList.remove('active');\n}\n\n// add button event\ndocument.querySelector('#btn-level').addEventListener('click', (e) => {\n    level_index = level_index + 1 > CONSTANT.LEVEL.length - 1 ? 0 : level_index + 1;\n    level = CONSTANT.LEVEL[level_index];\n    e.target.innerHTML = CONSTANT.LEVEL_NAME[level_index];\n});\n\ndocument.querySelector('#btn-play').addEventListener('click', () => {\n    if (name_input.value.trim().length > 0) {\n        initSudoku();\n        startGame();\n    } else {\n        name_input.classList.add('input-err');\n        setTimeout(() => {\n            name_input.classList.remove('input-err');\n            name_input.focus();\n        }, 500);\n    }\n});\n\ndocument.querySelector('#btn-continue').addEventListener('click', () => {\n    if (name_input.value.trim().length > 0) {\n        loadSudoku();\n        startGame();\n    } else {\n        name_input.classList.add('input-err');\n        setTimeout(() => {\n            name_input.classList.remove('input-err');\n            name_input.focus();\n        }, 500);\n    }\n});\n\ndocument.querySelector('#btn-pause').addEventListener('click', () => {\n    pause_screen.classList.add('active');\n    pause = true;\n});\n\ndocument.querySelector('#btn-resume').addEventListener('click', () => {\n    pause_screen.classList.remove('active');\n    pause = false;\n});\n\ndocument.querySelector('#btn-new-game').addEventListener('click', () => {\n    returnStartScreen();\n});\n\ndocument.querySelector('#btn-new-game-2').addEventListener('click', () => {\n    console.log('object')\n    returnStartScreen();\n});\n\ndocument.querySelector('#btn-delete').addEventListener('click', () => {\n    cells[selected_cell].innerHTML = '';\n    cells[selected_cell].setAttribute('data-value', 0);\n\n    let row = Math.floor(selected_cell / CONSTANT.GRID_SIZE);\n    let col = selected_cell % CONSTANT.GRID_SIZE;\n\n    su_answer[row][col] = 0;\n\n    removeErr();\n})\n// -------------\n\nconst init = () => {\n    const darkmode = JSON.parse(localStorage.getItem('darkmode'));\n    document.body.classList.add(darkmode ? 'dark' : 'light');\n    document.querySelector('meta[name=\"theme-color\"').setAttribute('content', darkmode ? '#1a1a2e' : '#fff');\n\n    const game = getGameInfo();\n\n    document.querySelector('#btn-continue').style.display = game ? 'grid' : 'none';\n\n    initGameGrid();\n    initCellsEvent();\n    initNumberInputEvent();\n\n    if (getPlayerName()) {\n        name_input.value = getPlayerName();\n    } else {\n        name_input.focus();\n    }\n}\n\ninit();\n\n// for starting the confetti\n\nconst start = () => {\n    setTimeout(function() {\n        confetti.start()\n    }, 1000); // 1000 is time that after 1 second start the confetti ( 1000 = 1 sec)\n};\n\n//  for stopping the confetti\n\nconst stop = () => {\n    setTimeout(function() {\n        confetti.stop()\n    }, 5000); // 5000 is time that after 5 second stop the confetti ( 5000 = 5 sec)\n};\n\n\n///////// sudoku.js\nconst newGrid = (size) => {\n    let arr = new Array(size);\n\n    for (let i = 0; i < size; i++) {\n        arr[i] = new Array(size);\n    }\n\n    for (let i = 0; i < Math.pow(size, 2); i++) {\n        arr[Math.floor(i/size)][i%size] = CONSTANT.UNASSIGNED;\n    }\n\n    return arr;\n}\n\n// check duplicate number in col\nconst isColSafe = (grid, col, value) => {\n    for (let row = 0; row < CONSTANT.GRID_SIZE; row++) {\n        if (grid[row][col] === value) return false;\n    }\n    return true;\n}\n\n// check duplicate number in row\nconst isRowSafe = (grid, row, value) => {\n    for (let col = 0; col < CONSTANT.GRID_SIZE; col++) {\n        if (grid[row][col] === value) return false;\n    }\n    return true;\n}\n\n// check duplicate number in 3x3 box\nconst isBoxSafe = (grid, box_row, box_col, value) => {\n    for (let row = 0; row < CONSTANT.BOX_SIZE; row++) {\n        for (let col = 0; col < CONSTANT.BOX_SIZE; col++) {\n            if (grid[row + box_row][col + box_col] === value) return false;\n        }\n    }\n    return true;\n}\n\n// check in row, col and 3x3 box\nconst isSafe = (grid, row, col, value) => {\n    return isColSafe(grid, col, value) && isRowSafe(grid, row, value) && isBoxSafe(grid, row - row%3, col - col%3, value) && value !== CONSTANT.UNASSIGNED;\n}\n\n// find unassigned cell\nconst findUnassignedPos = (grid, pos) => {\n    for (let row = 0; row < CONSTANT.GRID_SIZE; row++) {\n        for (let col = 0; col < CONSTANT.GRID_SIZE; col++) {\n            if (grid[row][col] === CONSTANT.UNASSIGNED) {\n                pos.row = row;\n                pos.col = col;\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n// shuffle arr\nconst shuffleArray = (arr) => {\n    let curr_index = arr.length;\n\n    while (curr_index !== 0) {\n        let rand_index = Math.floor(Math.random() * curr_index);\n        curr_index -= 1;\n\n        let temp = arr[curr_index];\n        arr[curr_index] = arr[rand_index];\n        arr[rand_index] = temp;\n    }\n\n    return arr;\n}\n\n// check puzzle is complete\nconst isFullGrid = (grid) => {\n    return grid.every((row, i) => {\n        return row.every((value, j) => {\n            return value !== CONSTANT.UNASSIGNED;\n        });\n    });\n}\n\nconst sudokuCreate = (grid) => {\n    let unassigned_pos = {\n        row: -1,\n        col: -1\n    }\n\n    if (!findUnassignedPos(grid, unassigned_pos)) return true;\n\n    let number_list = shuffleArray([...CONSTANT.NUMBERS]);\n\n    let row = unassigned_pos.row;\n    let col = unassigned_pos.col;\n\n    number_list.forEach((num, i) => {\n        if (isSafe(grid, row, col, num)) {\n            grid[row][col] = num;\n\n            if (isFullGrid(grid)) {\n                return true;\n            } else {\n                if (sudokuCreate(grid)) {\n                    return true;\n                }\n            }\n\n            grid[row][col] = CONSTANT.UNASSIGNED;\n        }\n    });\n\n    return isFullGrid(grid);\n}\n\nconst sudokuCheck = (grid) => {\n    let unassigned_pos = {\n        row: -1,\n        col: -1\n    }\n\n    if (!findUnassignedPos(grid, unassigned_pos)) return true;\n\n    grid.forEach((row, i) => {\n        row.forEach((num, j) => {\n            if (isSafe(grid, i, j, num)) {\n                if (isFullGrid(grid)) {\n                    return true;\n                } else {\n                    if (sudokuCreate(grid)) {\n                        return true;\n                    }\n                }\n            }\n        })\n    })\n\n    return isFullGrid(grid);\n}\n\nconst rand = () => Math.floor(Math.random() * CONSTANT.GRID_SIZE);\n\nconst removeCells = (grid, level) => {\n    let res = [...grid];\n    let attemps = level;\n    while (attemps > 0) {\n        let row = rand();\n        let col = rand();\n        while (res[row][col] === 0) {\n            row = rand();\n            col = rand();\n        }\n        res[row][col] = CONSTANT.UNASSIGNED;\n        attemps--;\n    }\n    return res;\n}\n\n// generate sudoku base on level\nconst sudokuGen = (level) => {\n    let sudoku = newGrid(CONSTANT.GRID_SIZE);\n    console.log('sudoku', sudoku)\n    let check = sudokuCreate(sudoku);\n    console.log('checks', check)\n    if (check) {\n        let question = removeCells(sudoku, level);\n        return {\n            original: sudoku,\n            question: question\n        }\n    }\n    return undefined;\n}\n\n\n// isConfettiPaused\nvar confetti = {\n\tmaxCount: 150,\t\t//set max confetti count\n\tspeed: 2,\t\t\t//set the particle animation speed\n\tframeInterval: 15,\t//the confetti animation frame interval in milliseconds\n\talpha: 1.0,\t\t\t//the alpha opacity of the confetti (between 0 and 1, where 1 is opaque and 0 is invisible)\n\tgradient: false,\t//whether to use gradients for the confetti particles\n\tstart: null,\t\t//call to start confetti animation (with optional timeout in milliseconds, and optional min and max random confetti count)\n\tstop: null,\t\t\t//call to stop adding confetti\n\ttoggle: null,\t\t//call to start or stop the confetti animation depending on whether it's already running\n\tpause: null,\t\t//call to freeze confetti animation\n\tresume: null,\t\t//call to unfreeze confetti animation\n\ttogglePause: null,\t//call to toggle whether the confetti animation is paused\n\tremove: null,\t\t//call to stop the confetti animation and remove all confetti immediately\n\tisPaused: null,\t\t//call and returns true or false depending on whether the confetti animation is paused\n\tisRunning: null\t\t//call and returns true or false depending on whether the animation is running\n};\n\n(function() {\n\tconfetti.start = startConfetti;\n\tconfetti.stop = stopConfetti;\n\tconfetti.toggle = toggleConfetti;\n\tconfetti.pause = pauseConfetti;\n\tconfetti.resume = resumeConfetti;\n\tconfetti.togglePause = toggleConfettiPause;\n\tconfetti.isPaused = isConfettiPaused;\n\tconfetti.remove = removeConfetti;\n\tconfetti.isRunning = isConfettiRunning;\n\tvar supportsAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;\n\tvar colors = [\"rgba(30,144,255,\", \"rgba(107,142,35,\", \"rgba(255,215,0,\", \"rgba(255,192,203,\", \"rgba(106,90,205,\", \"rgba(173,216,230,\", \"rgba(238,130,238,\", \"rgba(152,251,152,\", \"rgba(70,130,180,\", \"rgba(244,164,96,\", \"rgba(210,105,30,\", \"rgba(220,20,60,\"];\n\tvar streamingConfetti = false;\n\tvar animationTimer = null;\n\tvar pause = false;\n\tvar lastFrameTime = Date.now();\n\tvar particles = [];\n\tvar waveAngle = 0;\n\tvar context = null;\n\n\tfunction resetParticle(particle, width, height) {\n\t\tparticle.color = colors[(Math.random() * colors.length) | 0] + (confetti.alpha + \")\");\n\t\tparticle.color2 = colors[(Math.random() * colors.length) | 0] + (confetti.alpha + \")\");\n\t\tparticle.x = Math.random() * width;\n\t\tparticle.y = Math.random() * height - height;\n\t\tparticle.diameter = Math.random() * 10 + 5;\n\t\tparticle.tilt = Math.random() * 10 - 10;\n\t\tparticle.tiltAngleIncrement = Math.random() * 0.07 + 0.05;\n\t\tparticle.tiltAngle = Math.random() * Math.PI;\n\t\treturn particle;\n\t}\n\n\tfunction toggleConfettiPause() {\n\t\tif (pause)\n\t\t\tresumeConfetti();\n\t\telse\n\t\t\tpauseConfetti();\n\t}\n\n\tfunction isConfettiPaused() {\n\t\treturn pause;\n\t}\n\n\tfunction pauseConfetti() {\n\t\tpause = true;\n\t}\n\n\tfunction resumeConfetti() {\n\t\tpause = false;\n\t\trunAnimation();\n\t}\n\n\tfunction runAnimation() {\n\t\tif (pause)\n\t\t\treturn;\n\t\telse if (particles.length === 0) {\n\t\t\tcontext.clearRect(0, 0, window.innerWidth, window.innerHeight);\n\t\t\tanimationTimer = null;\n\t\t} else {\n\t\t\tvar now = Date.now();\n\t\t\tvar delta = now - lastFrameTime;\n\t\t\tif (!supportsAnimationFrame || delta > confetti.frameInterval) {\n\t\t\t\tcontext.clearRect(0, 0, window.innerWidth, window.innerHeight);\n\t\t\t\tupdateParticles();\n\t\t\t\tdrawParticles(context);\n\t\t\t\tlastFrameTime = now - (delta % confetti.frameInterval);\n\t\t\t}\n\t\t\tanimationTimer = requestAnimationFrame(runAnimation);\n\t\t}\n\t}\n\n\tfunction startConfetti(timeout, min, max) {\n\t\tvar width = window.innerWidth;\n\t\tvar height = window.innerHeight;\n\t\twindow.requestAnimationFrame = (function() {\n\t\t\treturn window.requestAnimationFrame ||\n\t\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\t\twindow.mozRequestAnimationFrame ||\n\t\t\t\twindow.oRequestAnimationFrame ||\n\t\t\t\twindow.msRequestAnimationFrame ||\n\t\t\t\tfunction (callback) {\n\t\t\t\t\treturn window.setTimeout(callback, confetti.frameInterval);\n\t\t\t\t};\n\t\t})();\n\t\tvar canvas = document.getElementById(\"confetti-canvas\");\n\t\tif (canvas === null) {\n\t\t\tcanvas = document.createElement(\"canvas\");\n\t\t\tcanvas.setAttribute(\"id\", \"confetti-canvas\");\n\t\t\tcanvas.setAttribute(\"style\", \"display:block;z-index:999999;pointer-events:none;position:fixed;top:0\");\n\t\t\tdocument.body.prepend(canvas);\n\t\t\tcanvas.width = width;\n\t\t\tcanvas.height = height;\n\t\t\twindow.addEventListener(\"resize\", function() {\n\t\t\t\tcanvas.width = window.innerWidth;\n\t\t\t\tcanvas.height = window.innerHeight;\n\t\t\t}, true);\n\t\t\tcontext = canvas.getContext(\"2d\");\n\t\t} else if (context === null)\n\t\t\tcontext = canvas.getContext(\"2d\");\n\t\tvar count = confetti.maxCount;\n\t\tif (min) {\n\t\t\tif (max) {\n\t\t\t\tif (min == max)\n\t\t\t\t\tcount = particles.length + max;\n\t\t\t\telse {\n\t\t\t\t\tif (min > max) {\n\t\t\t\t\t\tvar temp = min;\n\t\t\t\t\t\tmin = max;\n\t\t\t\t\t\tmax = temp;\n\t\t\t\t\t}\n\t\t\t\t\tcount = particles.length + ((Math.random() * (max - min) + min) | 0);\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tcount = particles.length + min;\n\t\t} else if (max)\n\t\t\tcount = particles.length + max;\n\t\twhile (particles.length < count)\n\t\t\tparticles.push(resetParticle({}, width, height));\n\t\tstreamingConfetti = true;\n\t\tpause = false;\n\t\trunAnimation();\n\t\tif (timeout) {\n\t\t\twindow.setTimeout(stopConfetti, timeout);\n\t\t}\n\t}\n\n\tfunction stopConfetti() {\n\t\tstreamingConfetti = false;\n\t}\n\n\tfunction removeConfetti() {\n\t\tstop();\n\t\tpause = false;\n\t\tparticles = [];\n\t}\n\n\tfunction toggleConfetti() {\n\t\tif (streamingConfetti)\n\t\t\tstopConfetti();\n\t\telse\n\t\t\tstartConfetti();\n\t}\n\n\tfunction isConfettiRunning() {\n\t\treturn streamingConfetti;\n\t}\n\n\tfunction drawParticles(context) {\n\t\tvar particle;\n\t\tvar x, y, x2, y2;\n\t\tfor (var i = 0; i < particles.length; i++) {\n\t\t\tparticle = particles[i];\n\t\t\tcontext.beginPath();\n\t\t\tcontext.lineWidth = particle.diameter;\n\t\t\tx2 = particle.x + particle.tilt;\n\t\t\tx = x2 + particle.diameter / 2;\n\t\t\ty2 = particle.y + particle.tilt + particle.diameter / 2;\n\t\t\tif (confetti.gradient) {\n\t\t\t\tvar gradient = context.createLinearGradient(x, particle.y, x2, y2);\n\t\t\t\tgradient.addColorStop(\"0\", particle.color);\n\t\t\t\tgradient.addColorStop(\"1.0\", particle.color2);\n\t\t\t\tcontext.strokeStyle = gradient;\n\t\t\t} else\n\t\t\t\tcontext.strokeStyle = particle.color;\n\t\t\tcontext.moveTo(x, particle.y);\n\t\t\tcontext.lineTo(x2, y2);\n\t\t\tcontext.stroke();\n\t\t}\n\t}\n\n\tfunction updateParticles() {\n\t\tvar width = window.innerWidth;\n\t\tvar height = window.innerHeight;\n\t\tvar particle;\n\t\twaveAngle += 0.01;\n\t\tfor (var i = 0; i < particles.length; i++) {\n\t\t\tparticle = particles[i];\n\t\t\tif (!streamingConfetti && particle.y < -15)\n\t\t\t\tparticle.y = height + 100;\n\t\t\telse {\n\t\t\t\tparticle.tiltAngle += particle.tiltAngleIncrement;\n\t\t\t\tparticle.x += Math.sin(waveAngle) - 0.5;\n\t\t\t\tparticle.y += (Math.cos(waveAngle) + particle.diameter + confetti.speed) * 0.5;\n\t\t\t\tparticle.tilt = Math.sin(particle.tiltAngle) * 15;\n\t\t\t}\n\t\t\tif (particle.x > width + 20 || particle.x < -20 || particle.y > height) {\n\t\t\t\tif (streamingConfetti && particles.length <= confetti.maxCount)\n\t\t\t\t\tresetParticle(particle, width, height);\n\t\t\t\telse {\n\t\t\t\t\tparticles.splice(i, 1);\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n"]}